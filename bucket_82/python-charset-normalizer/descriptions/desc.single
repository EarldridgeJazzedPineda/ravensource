
<h1 align="center">Charset Detection, for Everyone 👋 [image]</h1>

<p align="center">
  <sup>The Real First Universal Charset Detector</sup><br>
  
    [image]
  
  
    [image]
  
  
    [image]
  
  
      [image]
  
  
    [image]
  
  
    [image]
  
</p>

> A library that helps you read text from an unknown charset encoding.<br
/> Motivated by `chardet`,
> I'm trying to resolve the issue by taking a new approach.
> All IANA character set names for which the Python core library provides
codecs are supported.

<p align="center">
  >>>>> 👉 Try Me Online Now, Then Adopt Me 👈  <<<<<
</p>

This project offers you an alternative to **Universal Charset Encoding
Detector**, also known as **Chardet**.

| Feature       | [Chardet]       | Charset Normalizer | [cChardet] |
| ------------- | :-------------: | :------------------: |
:------------------: |
| `Fast`         | ❌<br>          | ✅<br>             | ✅ <br> |
| `Universal**`     | ❌            | ✅                 | ❌ |
| `Reliable` **without** distinguishable standards | ❌ | ✅ | ✅ |
| `Reliable` **with** distinguishable standards | ✅ | ✅ | ✅ |
| `Free & Open`  | ✅             | ✅                | ✅ |
| `License` | LGPL-2.1 | MIT | MPL-1.1
| `Native Python` | ✅ | ✅ | ❌ |
| `Detect spoken language` | ❌ | ✅ | N/A |
| `Supported Encoding` | 30 | :tada: [93]  | 40

<p align="center">
[image][image]

*\*\* : They are clearly using specific code for a specific encoding even
if covering most of used one*<br> 

## ⚡ Performance

This package offer better performance than its counterpart Chardet. Here
are some numbers.

| Package       | Accuracy       | Mean per file (ns) | File per sec (est)
|
| ------------- | :-------------: | :------------------: |
:------------------: |
|      [chardet]        |     93.0 %     |     150 ms      |       7
file/sec        |
| charset-normalizer |    **95.0 %**     |     **36 ms**      |       28
file/sec    |

| Package       | 99th percentile       | 95th percentile | 50th percentile
|
| ------------- | :-------------: | :------------------: |
:------------------: |
|      [chardet]        |     647 ms     |     250 ms      |       24 ms   
    |
| charset-normalizer |    354 ms     |     202 ms      |       16 ms    |

Chardet's performance on larger file (1MB+) are very poor. Expect huge
difference on large payload.

> Stats are generated using 400+ files using default parameters. More
details on used files, see GHA workflows.
> And yes, these results might change at any time. The dataset can be
updated to include more files.

[cchardet] is a non-native (cpp binding) faster alternative. If speed is
the most important factor,
you should try it.

## Your support

Please ⭐ this repository if this project helped you!

## ✨ Installation

Using PyPi for latest stable
```sh
pip install charset-normalizer
