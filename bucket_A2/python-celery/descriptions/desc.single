.. image::
http://docs.celeryproject.org/en/latest/_images/celery-banner-small.png

|build-status| |coverage| |license| |wheel| |pyversion| |pyimp|
|ocbackerbadge| |ocsponsorbadge|

:Version: 4.3.0 (rhubarb)
:Web: http://celeryproject.org/
:Download: https://pypi.org/project/celery/
:Source: https://github.com/celery/celery/
:Keywords: task, queue, job, async, rabbitmq, amqp, redis,
  python, distributed, actors

Donations
=========

This project relies on your generous donations.

If you are using Celery to create a commercial product, please consider
becoming our `backer`_ or our `sponsor`_ to ensure Celery's future.

.. _`backer`: https://opencollective.com/celery#backer
.. _`sponsor`: https://opencollective.com/celery#sponsor


Sponsors
--------

`Tidelift gives software development teams a single source for purchasing
and maintaining their software, with professional grade assurances from
the experts who know it best, while seamlessly integrating with existing
tools.
<https://tidelift.com/subscription/pkg/pypi-celery?utm_source=pypi-celery&u
tm_medium=referral&utm_campaign=readme>`_


What's a Task Queue?
====================

Task queues are used as a mechanism to distribute work across threads or
machines.

A task queue's input is a unit of work, called a task, dedicated worker
processes then constantly monitor the queue for new work to perform.

Celery communicates via messages, usually using a broker
to mediate between clients and workers. To initiate a task a client puts a
message on the queue, the broker then delivers the message to a worker.

A Celery system can consist of multiple workers and brokers, giving way
to high availability and horizontal scaling.

Celery is written in Python, but the protocol can be implemented in any
language. In addition to Python there's node-celery_ for Node.js,
and a `PHP client`_.

Language interoperability can also be achieved by using webhooks
in such a way that the client enqueues an URL to be requested by a worker.

.. _node-celery: https://github.com/mher/node-celery
.. _`PHP client`: https://github.com/gjedeer/celery-php

What do I need?
===============

Celery version 4.3 runs on,

- Python (2.7, 3.4, 3.5, 3.6, 3.7)
- PyPy2.7 (6.0)
- PyPy3.5 (6.0)


This is the last version to support Python 2.7,
and from the next version (Celery 5.x) Python 3.5 or newer is required.

If you're running an older version of Python, you need to be running
an older version of Celery:

- Python 2.6: Celery series 3.1 or earlier.
- Python 2.5: Celery series 3.0 or earlier.
- Python 2.4 was Celery series 2.2 or earlier.

Celery is a project with minimal funding,
so we don't support Microsoft Windows.
Please don't open any issues related to that platform.

*Celery* is usually used with a message broker to send and receive
messages.
The RabbitMQ, Redis transports are feature complete,
but there's also experimental support for a myriad of other solutions,
including
using SQLite for local development.

*Celery* can run on a single machine, on multiple machines, or even
across datacenters.

Get Started
===========

If this is the first time you're trying to use Celery, or you're
new to Celery 4.2 coming from previous versions then you should read our
getting started tutorials:

- `First steps with Celery`_

    Tutorial teaching you the bare minimum needed to get started with
Celery.

- `Next steps`_

    A more complete overview, showing more features.
