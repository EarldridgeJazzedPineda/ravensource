This code requires Ada 2020 features which are missing from gcc9.
This patch reverts the code to it's previous form.

--- source/text/vss-strings.ads.orig	2021-06-15 05:07:58 UTC
+++ source/text/vss-strings.ads
@@ -53,8 +53,7 @@ package VSS.Strings is
    New_Line_Function : constant Line_Terminator_Set :=
      (CR | LF | CRLF | NEL => True, others => False);
 
-   type Virtual_String is tagged private
-     with String_Literal => To_Virtual_String;
+   type Virtual_String is tagged private;
    pragma Preelaborable_Initialization (Virtual_String);
 
    Empty_Virtual_String : constant Virtual_String;
--- testsuite/json/test_json_writer.adb.orig	2021-06-15 05:07:59 UTC
+++ testsuite/json/test_json_writer.adb
@@ -72,7 +72,8 @@ procedure Test_JSON_Writer is
         Character'Val (16#1F#)));
    --  All control characters required to be escaped
 
-   Escaped : constant VSS.Strings.Virtual_String := "\""";
+   Escaped : constant VSS.Strings.Virtual_String :=
+     VSS.Strings.Conversions.To_Virtual_String ("\""");
 
    procedure Test_Output_Failure
      (Writer : in out VSS.JSON.Streams.Writers.JSON_Simple_Writer'Class);
@@ -237,11 +238,11 @@ procedure Test_JSON_Writer is
       Object_Key_Scenario : constant Test_Scenario :=
         ((1, (Kind => VSS.JSON.Events.Start_Object)),
          (7, (Kind => VSS.JSON.Events.Key_Name,
-              Key  => "name")),
+              Key  => VSS.Strings.To_Virtual_String ("name"))),
          (2, (Kind         => VSS.JSON.Events.String_Value,
               String_Value => VSS.Strings.Empty_Virtual_String)),
          (11, (Kind => VSS.JSON.Events.Key_Name,
-               Key  => "surname")),
+              Key  => VSS.Strings.To_Virtual_String ("surname"))),
          (2, (Kind         => VSS.JSON.Events.String_Value,
               String_Value => VSS.Strings.Empty_Virtual_String)),
          (1, (Kind => VSS.JSON.Events.End_Object)));
@@ -283,51 +284,66 @@ begin
 
    --  Some usual constructs.
 
-   Writer.Key_Name ("name", Success);
-   Writer.String_Value ("Some name", Success);
-   Writer.Key_Name ("names", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("name"), Success);
+   Writer.String_Value
+     (VSS.Strings.Conversions.To_Virtual_String ("Some name"), Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("names"), Success);
    Writer.Start_Array (Success);
-   Writer.String_Value ("Some", Success);
-   Writer.String_Value ("name", Success);
+   Writer.String_Value
+     (VSS.Strings.Conversions.To_Virtual_String ("Some"), Success);
+   Writer.String_Value
+     (VSS.Strings.Conversions.To_Virtual_String ("name"), Success);
    Writer.End_Array (Success);
-   Writer.Key_Name ("is", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("is"), Success);
    Writer.Boolean_Value (False, Success);
-   Writer.Key_Name ("no", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("no"), Success);
    Writer.Boolean_Value (True, Success);
-   Writer.Key_Name ("empty", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("empty"), Success);
    Writer.Null_Value (Success);
-   Writer.Key_Name ("integer", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("integer"), Success);
    Writer.Integer_Value (15, Success);
-   Writer.Key_Name ("float", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("float"), Success);
    Writer.Float_Value (20.5, Success);
 
    --  Arrays of different types
 
-   Writer.Key_Name ("booleans", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("booleans"), Success);
    Writer.Start_Array (Success);
    Writer.Boolean_Value (False, Success);
    Writer.Boolean_Value (True, Success);
    Writer.End_Array (Success);
 
-   Writer.Key_Name ("nulls", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("nulls"), Success);
    Writer.Start_Array (Success);
    Writer.Null_Value (Success);
    Writer.Null_Value (Success);
    Writer.End_Array (Success);
 
-   Writer.Key_Name ("floats", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("floats"), Success);
    Writer.Start_Array (Success);
    Writer.Float_Value (-1.0, Success);
    Writer.Float_Value (1.0, Success);
    Writer.End_Array (Success);
 
-   Writer.Key_Name ("integers", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("integers"), Success);
    Writer.Start_Array (Success);
    Writer.Integer_Value (-1, Success);
    Writer.Integer_Value (1, Success);
    Writer.End_Array (Success);
 
-   Writer.Key_Name ("arrays", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("arrays"), Success);
    Writer.Start_Array (Success);
    Writer.Start_Array (Success);
    Writer.End_Array (Success);
@@ -335,7 +351,8 @@ begin
    Writer.End_Array (Success);
    Writer.End_Array (Success);
 
-   Writer.Key_Name ("objects", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("objects"), Success);
    Writer.Start_Array (Success);
    Writer.Start_Object (Success);
    Writer.End_Object (Success);
@@ -345,20 +362,24 @@ begin
 
    --  All control characters inside string value
 
-   Writer.Key_Name ("controls", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("controls"), Success);
    Writer.String_Value (All_Controls, Success);
 
    --  Backslash and quotation mark inside string value
 
-   Writer.Key_Name ("others", Success);
+   Writer.Key_Name
+     (VSS.Strings.Conversions.To_Virtual_String ("others"), Success);
    Writer.String_Value (Escaped, Success);
 
    --  Empty string as value (for both null string and string of zero length
    --  cases)
 
-   Writer.Key_Name ("empty_string", Success);
-   Writer.String_Value ("", Success);
-   Writer.Key_Name ("null_string", Success);
+   Writer.Key_Name
+     (VSS.Strings.To_Virtual_String ("empty_string"), Success);
+   Writer.String_Value (VSS.Strings.To_Virtual_String (""), Success);
+   Writer.Key_Name
+     (VSS.Strings.To_Virtual_String ("null_string"), Success);
    Writer.String_Value (VSS.Strings.Empty_Virtual_String, Success);
 
    Writer.End_Object (Success);
--- source/text/implementation/vss-strings-converters-decoders-utf8.adb.orig	2021-06-15 05:07:58 UTC
+++ source/text/implementation/vss-strings-converters-decoders-utf8.adb
@@ -179,10 +179,13 @@ package body VSS.Strings.Converters.Deco
    -------------------
 
    overriding function Error_Message
-     (Self : UTF8_Decoder) return VSS.Strings.Virtual_String is
+     (Self : UTF8_Decoder) return VSS.Strings.Virtual_String
+   is
+      error_msg : constant VSS.Strings.Virtual_String :=
+         VSS.Strings.To_Virtual_String ("Iff-formed sequence");
    begin
       if Self.Error then
-         return "Iff-formed sequence";
+         return error_msg;
 
       else
          return VSS.Strings.Empty_Virtual_String;
--- source/text/implementation/vss-strings-converters-decoders.adb.orig	2021-06-15 05:07:58 UTC
+++ source/text/implementation/vss-strings-converters-decoders.adb
@@ -118,11 +118,14 @@ package body VSS.Strings.Converters.Deco
    procedure Initialize
      (Self     : in out Virtual_String_Decoder'Class;
       Encoding : VSS.Strings.Virtual_String;
-      Flags    : Converter_Flags := Default_Converter_Flags) is
+      Flags    : Converter_Flags := Default_Converter_Flags)
+   is
+      utf8 : constant VSS.Strings.Virtual_String :=
+             VSS.Strings.To_Virtual_String ("utf-8");
    begin
       Free (Self.Decoder);
 
-      if Encoding = "utf-8" then
+      if Encoding = utf8 then
          Self.Decoder := new VSS.Strings.Converters.Decoders.UTF8.UTF8_Decoder;
          Self.Decoder.Initialize (Flags);
       end if;
