==========
jsonschema
==========

|PyPI| |Pythons| |CI| |ReadTheDocs| |Precommit| |Zenodo|

jsonschema is an implementation of the [JSON Schema
] specification for Python.

.. code-block:: python

    >>> from jsonschema import validate

    >>> # A sample schema, like what we'd get from json.load()
    >>> schema = {
    ...     "type" : "object",
    ...     "properties" : {
    ...         "price" : {"type" : "number"},
    ...         "name" : {"type" : "string"},
    ...     },
    ... }

    >>> # If no exception is raised by validate(), the instance is valid.
    >>> validate(instance={"name" : "Eggs", "price" : 34.99},
schema=schema)

    >>> validate(
    ...     instance={"name" : "Eggs", "price" : "Invalid"}, schema=schema,
    ... )                                   # doctest:
+IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    ValidationError: 'Invalid' is not of type 'number'

It can also be used from console:

.. code-block:: bash

    $ jsonschema --instance sample.json sample.schema

Features
--------

* Partial support for
  `Draft 2020-12
<https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft202012Validator>`_
and
  `Draft 2019-09
<https://python-jsonschema.readthedocs.io/en/latest/validate/#jsonschema.Draft201909Validator>`_,
  except for dynamicRef / recursiveRef and ``$vocabulary`` (in-progress).
  Full support for
  [Draft 7],
  [Draft 6],
  [Draft 4]
  and
  [Draft 3]

* [Lazy validation]
  that can iteratively report *all* validation errors.

* [Programmatic querying]
  of which properties or items failed validation.

Installation
------------

jsonschema is available on [PyPI]. You can install using [pip]:

.. code-block:: bash

    $ pip install jsonschema

Running the Test Suite
----------------------

If you have tox installed (perhaps via pip install tox or your
package manager), running tox in the directory of your source
checkout will run jsonschema's test suite on all of the versions
of Python jsonschema supports. If you don't have all of the
versions that jsonschema is tested under, you'll likely want to run
using tox's ``--skip-missing-interpreters`` option.

Of course you're also free to just run the tests on a single version with
your
favorite test runner. The tests live in the ``jsonschema.tests`` package.

Benchmarks
----------

jsonschema's benchmarks make use of [pyperf
]. Running them can be done via::

      $ tox -e perf

Community
---------

The JSON Schema specification has [a Slack
], with an [invite link on its home page
]. Many folks knowledgeable on authoring
