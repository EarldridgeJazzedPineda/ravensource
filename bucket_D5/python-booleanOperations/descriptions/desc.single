|Build Status| |PyPI| |Python Versions|

BooleanOperations
=================

Boolean operations on paths which uses a super fast [polygon clipper
library by Angus Johnson].

You can download the latest version from PyPI:

https://pypi.org/project/booleanOperations.

Install
-------

[Pip] is the recommended tool to install booleanOperations.

To install the latest version:

.. code:: sh

 pip install booleanOperations

BooleanOperations depends on the following packages:

- [pyclipper]: Cython wrapper for  the C++ Clipper library - [fonttools]

All dependencies are available on PyPI, so they will be resolved
automatically upon installing booleanOperations.

BooleanOperationManager
-----------------------

Containing a BooleanOperationManager handling all boolean operations on
paths. Paths must be similar to defcon, robofab contours. A manager draws
the result in a pointPen.

.. code:: py

 from booleanOperations import BooleanOperationManager

 manager = BooleanOperationManager()

BooleanOperationManager() ~~~~~~~~~~~~~~~~~~~~~~~~~

Create a BooleanOperationManager.

manager.union(contours, pointPen) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Performs a union on all contours and draw it in the pointPen. (this is a
what a remove overlaps does)

manager.difference(contours, clipContours, pointPen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Knock out the clipContours from the contours and draw it in the pointPen.

manager.intersection(contours, clipContours, pointPen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Draw only the overlaps from the contours with the clipContours\ and draw it
in the pointPen.

manager.xor(contours, clipContours, pointPen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Draw only the parts that not overlaps from the contours with the
clipContours\ and draw it in the pointPen.

manager.getIntersections(contours) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Returning all intersection for the given contours

BooleanGlyph
------------

A glyph like object with boolean powers.

.. code:: py

 from booleanOperations.booleanGlyph import BooleanGlyph

 booleanGlyph = BooleanGlyph(sourceGlyph)

BooleanGlyph(sourceGlyph) ~~~~~~~~~~~~~~~~~~~~~~~~~

Create a BooleanGlyph object from sourceGlyph. This is a very shallow glyph
object with basic support.

booleanGlyph.union(other) ^^^^^^^^^^^^^^^^^^^^^^^^^

Perform a **union** with the other. Other must be a glyph or BooleanGlyph
object.

.. code:: py

 result = BooleanGlyph(glyph).union(BooleanGlyph(glyph2))  result =
BooleanGlyph(glyph) | BooleanGlyph(glyph2)

booleanGlyph.difference(other) ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
