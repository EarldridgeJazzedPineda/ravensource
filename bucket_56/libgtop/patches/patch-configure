--- configure.orig	2019-03-11 08:56:47 UTC
+++ configure
@@ -7309,7 +7309,7 @@ darwin* | rhapsody*)
   lt_cv_deplibs_check_method=pass_all
   ;;
 
-freebsd* | dragonfly*)
+freebsd* | dragonfly* | midnightbsd*)
   if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then
     case $host_cpu in
     i*86 )
@@ -11573,7 +11573,7 @@ fi
       ;;
 
     # FreeBSD 3 and greater uses gcc -shared to do shared libraries.
-    freebsd* | dragonfly*)
+    freebsd* | dragonfly* | midnight*)
       archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'
       hardcode_libdir_flag_spec='-R$libdir'
       hardcode_direct=yes
@@ -12618,7 +12618,7 @@ dgux*)
   shlibpath_var=LD_LIBRARY_PATH
   ;;
 
-freebsd* | dragonfly*)
+freebsd* | dragonfly* | midnight*)
   # DragonFly does not have aout.  When/if they implement a new
   # versioning mechanism, adjust this.
   if test -x /usr/bin/objformat; then
@@ -13955,7 +13955,7 @@ $as_echo_n "checking for libgtop sysdeps
 	  libgtop_sysdeps_private_fsusage=yes
 	  libgtop_postinstall='chgrp kmem $(bindir)/libgtop_server2 && chmod 2555 $(bindir)/libgtop_server2'
 	  ;;
-	freebsd*|kfreebsd*)
+	freebsd*|dragonfly*|kfreebsd*|midnight*)
 	  libgtop_sysdeps_dir=freebsd
 	  libgtop_need_server=yes
 	  libgtop_sysdeps_private_mountlist=yes
@@ -14020,7 +14020,7 @@ $as_echo "$libgtop_sysdeps_dir" >&6; }
 
 
 	case "$host_os" in
-	*bsd*)
+	*bsd*|dragonfly*)
 	  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for kvm_open in -lkvm" >&5
 $as_echo_n "checking for kvm_open in -lkvm... " >&6; }
 if ${ac_cv_lib_kvm_kvm_open+:} false; then :
@@ -14101,6 +14101,8 @@ $as_echo_n "checking for I4B... " >&6; }
 
 #if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__FreeBSD_kernel__)
 #include <net/if_sppp.h>
+#elif defined(__DragonFly__)
+#include <net/sppp/if_sppp.h>
 #else
 #include <i4b/sppp/if_sppp.h>
 #endif
@@ -14147,6 +14149,8 @@ $as_echo_n "checking for I4B accounting.
 
 #if defined(__FreeBSD__) || defined(__NetBSD__) || defined(__FreeBSD_kernel__)
 #include <net/if_sppp.h>
+#elif defined(__DragonFly__)
+#include <net/sppp/if_sppp.h>
 #else
 #include <i4b/sppp/if_sppp.h>
 #endif
@@ -14462,6 +14466,57 @@ $as_echo "#define HAVE_IFADDRS_H 1" >>co
 
 fi
 
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for kinfo_getfile in -lutil" >&5
+$as_echo_n "checking for kinfo_getfile in -lutil... " >&6; }
+if ${ac_cv_lib_util_kinfo_getfile+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_check_lib_save_LIBS=$LIBS
+LIBS="-lutil  $LIBS"
+cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+
+/* Override any GCC internal prototype to avoid an error.
+   Use char because int might match the return type of a GCC
+   builtin and then its argument prototype would still apply.  */
+#ifdef __cplusplus
+extern "C"
+#endif
+char kinfo_getfile ();
+int
+main ()
+{
+return kinfo_getfile ();
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_link "$LINENO"; then :
+  ac_cv_lib_util_kinfo_getfile=yes
+else
+  ac_cv_lib_util_kinfo_getfile=no
+fi
+rm -f core conftest.err conftest.$ac_objext \
+    conftest$ac_exeext conftest.$ac_ext
+LIBS=$ac_check_lib_save_LIBS
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_util_kinfo_getfile" >&5
+$as_echo "$ac_cv_lib_util_kinfo_getfile" >&6; }
+if test "x$ac_cv_lib_util_kinfo_getfile" = xyes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_LIBUTIL 1
+_ACEOF
+
+  LIBS="-lutil $LIBS"
+
+fi
+
+if test xac_cv_lib_kinfo_getfile_util = xyes ; then
+
+$as_echo "#define HAVE_KINFO_GETFILE 1" >>confdefs.h
+
+fi
+
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for an ANSI C-conforming const" >&5
 $as_echo_n "checking for an ANSI C-conforming const... " >&6; }
 if ${ac_cv_c_const+:} false; then :
@@ -18806,7 +18861,7 @@ if test x$cross_compiling = xyes ; then
         sunos*)
           fu_cv_sys_stat_statfs4=yes
           ;;
-        freebsd*)
+        freebsd*|dragonfly*|midnight*)
           fu_cv_sys_stat_statfs2_bsize=yes
           ;;
         osf*)
