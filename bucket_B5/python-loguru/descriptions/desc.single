<p align="center">
    
        [image]
        <!-- Logo credits: Sambeet from Pixaday -->
        <!-- Logo fonts: Comfortaa + Raleway -->
    
</p>
<p align="center">
    [image]
    [image]
    [image]
    [image]
    [image]
    [image]
    [image]
</p>
<p align="center">
    
        [image]
    
</p>

______________________________________________________________________

**Loguru** is a library which aims to bring enjoyable logging in Python.

Did you ever feel lazy about configuring a logger and used `print()`
instead?... I did, yet logging is fundamental to every application and
eases the process of debugging. Using **Loguru** you have no excuse not to
use logging from the start, this is as simple as `from loguru import
logger`.

Also, this library is intended to make Python logging less painful by
adding a bunch of useful functionalities that solve caveats of the standard
loggers. Using logs in your application should be an automatism, **Loguru**
tries to make it both pleasant and powerful.

<!-- end-of-readme-intro -->

## Installation

`
pip install loguru
`

## Features

- [Ready to use out of the box without boilerplate]
- [No Handler, no Formatter, no Filter: one function to rule them all]
- [Easier file logging with rotation / retention / compression]
- [Modern string formatting using braces style]
- [Exceptions catching within threads or main]
- [Pretty logging with colors]
- [Asynchronous, Thread-safe, Multiprocess-safe]
- [Fully descriptive exceptions]
- [Structured logging as needed]
- [Lazy evaluation of expensive functions]
- [Customizable levels]
- [Better datetime handling]
- [Suitable for scripts and libraries]
- [Entirely compatible with standard logging]
- [Personalizable defaults through environment variables]
- [Convenient parser]
- [Exhaustive notifier]
- <s>[10x faster than built-in logging]</s>

## Take the tour

### Ready to use out of the box without boilerplate

The main concept of Loguru is that **there is one and only one**
[`logger`].

For convenience, it is pre-configured and outputs to `stderr` to begin with
(but that's entirely configurable).

```python
from loguru import logger

logger.debug("That's it, beautiful and simple logging!")
```

The [`logger`] is just an interface which dispatches log messages to
configured handlers. Simple, right?

### No Handler, no Formatter, no Filter: one function to rule them all

How to add a handler? How to set up logs formatting? How to filter
messages? How to set level?

One answer: the [`add()`] function.

```python
logger.add(sys.stderr, format="{time} {level} {message}",
filter="my_module", level="INFO")
```

This function should be used to register [sinks] which are responsible for
managing [log messages] contextualized with a [record dict]. A sink can
take many forms: a simple function, a string path, a file-like object, a
