with "gtkada";

library project Spawn_Glib is
   type BUILD_KIND is ("static", "static-pic", "relocatable");
   BUILD : BUILD_KIND := external("SPAWN_GLIB_BUILD", external("LIBRARY_TYPE", "static-pic"));

   for Languages use ("Ada");

   case BUILD is
      when "static" =>
         for Source_Dirs use ("../../include/spawn_glib/");
         for Library_Dir use "../../lib/spawn_glib.static/";
         for Library_Kind use "static";
      when "static-pic" =>
         for Source_Dirs use ("../../include/spawn_glib");
         for Library_Dir use "../../lib/spawn_glib.static-pic";
         for Library_Kind use "static-pic";
      when "relocatable" =>
         for Source_Dirs use ("../../include/spawn_glib");
         for Library_Dir use "../../lib/spawn_glib.relocatable";
         for Library_Kind use "relocatable";
   end case;

   for Library_Name use "spawn_glib";

   package Naming is
      for dot_replacement use "-";
      for casing use "lowercase";
      for spec_suffix ("ada") use ".ads";
      for body_suffix ("ada") use ".adb";
      for body ("spawn.processes") use "spawn-processes__glib.adb";
      for body ("spawn.environments.search_in_path") use "spawn-environments-search_in_path__posix.adb";
      for body ("spawn.environments.internal") use "spawn-environments-internal__glib.adb";
      for body ("spawn.environments.initialize_default") use "spawn-environments-initialize_default__glib.adb";
      for body ("spawn.internal") use "spawn-internal__posix.adb";
      for spec ("spawn.environments.internal") use "spawn-environments-internal__glib.ads";
      for spec ("spawn.internal") use "spawn-internal__glib.ads";
   end Naming;

   package Linker is
      null;
   end Linker;

   package Install is
      for Active use "False";
   end Install;

   for Externally_Built use "True";

   type Os_Api_Kind is
     ("unix", "osx", "Windows_NT");

   type Spawn_Glib_Build_Kind is
     ("dev", "prod", "coverage");

   type Any_Boolean is
     ("false", "true");

   linker_options     := ();
   ada_switches       := ("-gnatwe", "-O2", "-g");
   common_excluded    := ("spawn-processes-monitor.ads", "spawn-processes-monitor_loop.ads", "spawn-processes-monitor_loop.adb");
   warnings_as_errors : any_boolean := "true";
   build_mode         : spawn_glib_build_kind := "prod";
   os_api             : os_api_kind := "unix";
end Spawn_Glib;
