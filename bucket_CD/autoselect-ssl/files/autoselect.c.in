/*
 * This program runs one of the four SSL variants supported by ravenports.
 * The first priority is the variant specified by SSL_VARIANT environment
 * variable.  The second priority is the SSL default defined by the
 * ravenadm profile that builds this file.  The remaining priority is:
 *   openssl
 *   libressl
 *   openssl-devel
 *   libressl-devel
 *
 * If no SSL variant is installed, an error message will be displayed,
 * otherwise the requested program will be executed.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

int
main(int argc, char **argv)
{
	int x;
	char *override;
	char *ALPHA   = "openssl";
	char *BRAVO   = "libressl";
	char *CHARLIE = "openssl-devel";
	char *DELTA   = "libressl-devel";
	char *ZULU    = "%%SSL_VARIANT%%";
	char *sslver  = NULL;
	char *cmd;
	char recommand[1024];

	/*
	 * Get the last path element of the program name being executed
	 */
	cmd = strrchr(argv[0], '/');
	if (cmd != NULL)
		cmd++;
	else
		cmd = argv[0];

	override = getenv("SSL_VARIANT");
	if (override != NULL) {
		if (strcmp (override, ALPHA) == 0) {
			sslver = ALPHA;
		} else if (strcmp (override, BRAVO) == 0) {
			sslver = BRAVO;
		} else if (strcmp (override, CHARLIE) == 0) {
			sslver = CHARLIE;
		} else if (strcmp (override, DELTA) == 0) {
			sslver = DELTA;
		} else {
			printf ("Invalid SSL_VARIANT value: %s\n",
				override);
			exit(1);
		}
		snprintf(recommand, 1024, "%%PREFIX%%/%s/bin/%s",
			sslver, cmd);
	}

	if (sslver == NULL) {
		snprintf(recommand, 1024, "%%PREFIX%%/%s/bin/%s",
			ZULU, cmd);
		if (access(recommand, F_OK) != -1) { sslver = ZULU; };
	}
	if (sslver == NULL && ZULU != ALPHA) {
		snprintf(recommand, 1024, "%%PREFIX%%/%s/bin/%s",
			ALPHA, cmd);
		if (access(recommand, F_OK) != -1) { sslver = ALPHA; };
	}
	if (sslver == NULL && ZULU != BRAVO) {
		snprintf(recommand, 1024, "%%PREFIX%%/%s/bin/%s",
			BRAVO, cmd);
		if (access(recommand, F_OK) != -1) { sslver = BRAVO; };
	}
	if (sslver == NULL && ZULU != CHARLIE) {
		snprintf(recommand, 1024, "%%PREFIX%%/%s/bin/%s",
			CHARLIE, cmd);
		if (access(recommand, F_OK) != -1) { sslver = CHARLIE; };
	}
	if (sslver == NULL && ZULU != DELTA) {
		snprintf(recommand, 1024, "%%PREFIX%%/%s/bin/%s",
			DELTA, cmd);
		if (access(recommand, F_OK) != -1) { sslver = DELTA; };
	}
	if (sslver == NULL) {
		printf ("No version of %s is installed.\n", cmd);
		exit(1);
	}

	argv[0] = recommand;
	execv(recommand, argv);

	/*
	 * Execution failed, so write out an error message
	 */
	printf ("Command execution failed: %s\n", recommand);
	printf ("               arguments:");
	for (x = 1; x < argc; x++)
		printf (" %s", argv[x]);
	printf ("\n");
	exit (1);
}
