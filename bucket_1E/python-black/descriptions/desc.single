![Black
Logo](https://raw.githubusercontent.com/psf/black/master/docs/_static/logo2-readme.png)

<h2 align="center">The Uncompromising Code Formatter</h2>

<p align="center"> <a href="https://travis-ci.com/psf/black"><img
alt="Build Status"
src="https://travis-ci.com/psf/black.svg?branch=master"></a> <a
href="https://black.readthedocs.io/en/stable/?badge=stable"><img
alt="Documentation Status"
src="https://readthedocs.org/projects/black/badge/?version=stable"></a> <a
href="https://coveralls.io/github/psf/black?branch=master"><img
alt="Coverage Status"
src="https://coveralls.io/repos/github/psf/black/badge.svg?branch=master"></a>
<a href="https://github.com/psf/black/blob/master/LICENSE"><img
alt="License: MIT"
src="https://black.readthedocs.io/en/stable/_static/license.svg"></a> <a
href="https://pypi.org/project/black/"><img alt="PyPI"
src="https://black.readthedocs.io/en/stable/_static/pypi.svg"></a> <a
href="https://pepy.tech/project/black"><img alt="Downloads"
src="https://pepy.tech/badge/black"></a> <a
href="https://github.com/psf/black"><img alt="Code style: black"
src="https://img.shields.io/badge/code%20style-black-000000.svg"></a> </p>

> “Any color you like.”

_Black_ is the uncompromising Python code formatter. By using it, you agree
to cede control over minutiae of hand-formatting. In return, _Black_ gives
you speed, determinism, and freedom from `pycodestyle` nagging about
formatting. You will save time and mental energy for more important
matters.

Blackened code looks the same regardless of the project you're reading.
Formatting becomes transparent after a while and you can focus on the
content instead.

_Black_ makes code review faster by producing the smallest diffs possible.

Try it out now using the [Black Playground](https://black.now.sh). Watch
the [PyCon 2019 talk](https://youtu.be/esZLCuWs_2Y) to learn more.

---

_Contents:_ **[Installation and usage](#installation-and-usage)** | **[Code
style](#the-black-code-style)** | **[pyproject.toml](#pyprojecttoml)** |
**[Editor integration](#editor-integration)** | **[blackd](#blackd)** |
**[Version control integration](#version-control-integration)** |
**[Ignoring unmodified files](#ignoring-unmodified-files)** | **[Used
by](#used-by)** | **[Testimonials](#testimonials)** | **[Show your
style](#show-your-style)** | **[Contributing](#contributing-to-black)** |
**[Change Log](#change-log)** | **[Authors](#authors)**

---

## Installation and usage

### Installation

_Black_ can be installed by running `pip install black`. It requires Python
3.6.0+ to run but you can reformat Python 2 code with it, too.

### Usage

To get started right away with sensible defaults:

` black {source_file_or_directory} `

### Command line options

_Black_ doesn't provide many options. You can list them by running `black
--help`:

`text black [OPTIONS] [SRC]...

Options:  -c, --code TEXT Format the code passed in as a string.  -l,
--line-length INTEGER How many characters per line to allow.  [default: 88]
 -t, --target-version [py27|py33|py34|py35|py36|py37|py38]  Python versions
that should be supported by  Black's output. [default: per-file auto-
detection]  --py36 Allow using Python 3.6-only syntax on all  input files.
This will put trailing commas  in function signatures and calls also after
*args and **kwargs. Deprecated; use  --target-version instead. [default:
per-file  auto-detection]  --pyi Format all input files like typing stubs
regardless of file extension (useful when  piping source on standard
input).  -S, --skip-string-normalization  Don't normalize string quotes or
prefixes.  --check Don't write the files back, just return the  status.
Return code 0 means nothing would  change. Return code 1 means some files
would be reformatted. Return code 123 means  there was an internal error.
--diff Don't write the files back, just output a  diff for each file on
stdout.  --fast / --safe If --fast given, skip temporary sanity  checks.
[default: --safe]  --include TEXT A regular expression that matches files
and  directories that should be included on  recursive searches. An empty
value means  all files are included regardless of the  name. Use forward
slashes for directories  on all platforms (Windows, too). Exclusions  are
calculated first, inclusions later.  [default: \.pyi?$]  --exclude TEXT A
regular expression that matches files and  directories that should be
excluded on  recursive searches. An empty value means no  paths are
excluded. Use forward slashes for  directories on all platforms (Windows,
too).  Exclusions are calculated first, inclusions  later. [default:
/(\.eggs|\.git|\.hg|\.mypy  _cache|\.nox|\.tox|\.venv|_build|buck-
out|build|dist)/]  -q, --quiet Don't emit non-error messages to stderr.
