DEF[PORTVERSION]=	1.31.0
DEF[GCCX]=		EXTRACT_INFO(CURRENT_GCC)
DEF[VENDOR_MODS]=	openssl-src
# ----------------------------------------------------------------------------

NAMEBASE=		rust
VERSION=		${PORTVERSION}
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	Systems programming language from Mozilla
HOMEPAGE=		https://www.rust-lang.org/
CONTACT=		Michael_Neumann[mneumann@ntecs.de]

DOWNLOAD_GROUPS=	main dflyboot
SITES[main]=		https://static.rust-lang.org/dist/
SITES[dflyboot]=	https://www.ntecs.de/downloads/rust/1.31.0/
DISTFILE[1]=		rustc-${PORTVERSION}-src.tar.xz:main
DISTFILE[2]=		rustc-1.31.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DISTFILE[3]=		rust-std-1.31.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DISTFILE[4]=		cargo-0.32.0-x86_64-unknown-dragonfly.tar.xz:dflyboot
DF_INDEX=		1

SPKGS[standard]=	single

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

LICENSE=		APACHE20:single MIT:single
LICENSE_FILE=		APACHE20:{{WRKSRC}}/LICENSE-APACHE
			MIT:{{WRKSRC}}/LICENSE-MIT
LICENSE_TERMS=		single:{{WRKSRC}}/COPYRIGHT
LICENSE_SCHEME=		dual

FPC_EQUIVALENT=		lang/rust
ONLY_FOR_OPSYS=		dragonfly
BROKEN[all]=		WIP

EXTRACT_ONLY=		1
BUILD_DEPENDS=		bash:primary:standard
			cmake:single:standard
			llvm:single:standard
BUILDRUN_DEPENDS=	curl:primary:standard
			libssh2:single:standard
			libgit2:single:standard

USES=			gmake ssl zlib python:py27,build
MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--release-channel=stable
# #			--enable-cargo-native-static
			--enable-rpath
			--enable-extended
			--enable-vendor
			--enable-locked-deps
			--disable-jemalloc
			--local-rust-root={{WRKDIR}}/bootstrap
			--llvm-root={{LOCALBASE}}
			--prefix={{PREFIX}}
			--disable-ninja
DISTNAME=		rustc-${PORTVERSION}-src
MAKE_ENV=		LD_LIBRARY_PATH={{WRKDIR}}/bootstrap/lib
			LIBGIT2_SYS_USE_PKG_CONFIG=1
			LIBSSH2_SYS_USE_PKG_CONFIG=1
			OPENSSL_NO_PKG_CONFIG=1
			RUST_BACKTRACE=1
			PROFILE=release
			OPENSSL_DIR="{{OPENSSLBASE}}"
			HOME="{{WRKDIR}}"
INSTALL_REQ_TOOLCHAIN=	yes

post-patch:
	# Use rpath suitable for libz et al.
	${REINPLACE_CMD} -e 's|@PREFIX@|${PREFIX}|g' \
		${WRKSRC}/src/bootstrap/bin/rustc.rs

	# After patching crates, we need to update their corresponding
	# `.cargo-checksum.json` to reflect the new checksums verified by Cargo
	for vendor in ${VENDOR_MODS}; do \
		dir=${WRKSRC}/src/vendor/$$vendor; \
		if ! test -d "$$dir"; then \
			continue; \
		fi; \
		cd "$$dir"; \
		for file in $$(${FIND} * -name "*.orig"); do \
			old_checksum=$$(${SHA256} -q "$$file"); \
			new_checksum=$$(${SHA256} -q "$${file%%.orig}"); \
			regex="$$regex -e s|\"$${file%%.orig}\":\"$$old_checksum\"|\"$${file%%.orig}\":\"$$new_checksum\"|"; \
		done; \
		if test "$$regex"; then \
			${REINPLACE_CMD} -E $$regex .cargo-checksum.json; \
		fi; \
	done

post-configure:
	${MKDIR} ${WRKDIR}/bootstrap
	# Extract OS-specific bootstrap components
	# then install bootstrap components

	for F in ${SRC_RUSTC} ${SRC_RUSTSTD} ${SRC_CARGO}; do\
	   ${TAR} -C ${WRKDIR} -xf ${DISTDIR}/$$F.tar.xz\
	     --no-same-owner --no-same-permissions;\
	   ${LOCALBASE}/bin/bash ${WRKDIR}/$$F/install.sh\
	     --prefix=${WRKDIR}/bootstrap;\
	done

post-configure-dragonfly:
	${LN} -s /raven/toolchain/${GCCX}/lib/libgcc_s.so \
	${WRKDIR}/bootstrap/lib/rustlib/x86_64-unknown-dragonfly/lib/libgcc_pic.so

do-build:
	(cd ${BUILD_WRKSRC} && ${SETENV} ${MAKE_ENV} \
		${PYTHON_CMD} x.py build --verbose --config ./config.toml \
		--jobs ${MAKE_JOBS_NUMBER})
