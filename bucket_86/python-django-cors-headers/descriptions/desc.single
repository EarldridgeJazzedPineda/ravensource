django-cors-headers
===================

A Django App that adds Cross-Origin Resource Sharing (CORS) headers to
responses. This allows in-browser requests to your Django application from
other origins.

About CORS
----------

Adding CORS headers allows your resources to be accessed on other domains.
It's important you understand the implications before adding the headers,
since you could be unintentionally opening up your site's private data to
others.

Some good resources to read on the subject are:

* The [Wikipedia Page]) from Otto Yiu. Basically all of the changes in the
forked **django-cors-middleware** were merged back, or re-implemented in a
different way, so it should be possible to switch back. If there's a
feature that hasn't been merged, please open an issue about it.

**django-cors-headers** has had [40+ contributors ] in its time; thanks to
every one of them.

Configuration
-------------

Configure the middleware's behaviour in your Django settings. You must add
the hosts that are allowed to do cross-site requests to
CORS_ORIGIN_WHITELIST, or set CORS_ORIGIN_ALLOW_ALL to True to allow all
hosts.

CORS_ORIGIN_ALLOW_ALL ~~~~~~~~~~~~~~~~~~~~~~~~~ If True, the whitelist will
not be used and all origins will be accepted. Defaults to False.

CORS_ORIGIN_WHITELIST ~~~~~~~~~~~~~~~~~~~~~~~~~

A list of origins that are authorized to make cross-site HTTP requests.
Defaults to [].

An Origin is defined by [the CORS RFC Section 3.2], such as when the client
is running from a file:// domain. The special value [file://` is sent
accidentally by some versions of Chrome on Android as per `this bug].

Example:

.. code-block:: python

 CORS_ORIGIN_WHITELIST = [  "https://example.com",
"https://sub.example.com",  "http://localhost:8080",
"http://127.0.0.1:9000"  ]

CORS_ORIGIN_REGEX_WHITELIST ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A list of strings representing regexes that match Origins that are
authorized to make cross-site HTTP requests. Defaults to []. Useful when
CORS_ORIGIN_WHITELIST is impractical, such as when you have a large number
of subdomains.

Example:

.. code-block:: python

 CORS_ORIGIN_REGEX_WHITELIST = [  r"^https://\w+\.example\.com$",  ]

--------------

The following are optional settings, for which the defaults probably
suffice.

CORS_URLS_REGEX ~~~~~~~~~~~~~~~~~~~

A regex which restricts the URL's for which the CORS headers will be sent.
Defaults to r'^.*$', i.e. match all URL's. Useful when you only need CORS
on a part of your site, e.g. an API at /api/.

Example:

.. code-block:: python

 CORS_URLS_REGEX = r'^/api/.*$'

CORS_ALLOW_METHODS ~~~~~~~~~~~~~~~~~~~~~~

A list of HTTP verbs that are allowed for the actual request. Defaults to:

.. code-block:: python

 CORS_ALLOW_METHODS = [  'DELETE',  'GET',  'OPTIONS',  'PATCH',  'POST',
'PUT',  ]

The default can be imported as corsheaders.defaults.default_methods so you
can just extend it with your custom methods. This allows you to keep up to
date with any future changes. For example:

.. code-block:: python

 from corsheaders.defaults import default_methods

