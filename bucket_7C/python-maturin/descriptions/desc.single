# Maturin

_formerly pyo3-pack_

[Actions Status]
[FreeBSD]
[Bors enabled]
[![Crates.io]](https://crates.io/crates/maturin)
[PyPI]
[Maturin User Guide]
[Chat on Gitter]

Build and publish crates with pyo3, rust-cpython, cffi and uniffi bindings
as well as rust binaries as python packages.

This project is meant as a zero configuration replacement for
[setuptools-rust] and [milksnake].
It supports building wheels for python 3.5+ on windows, linux, mac and
freebsd, can upload them to [pypi] and has basic pypy support.

Check out the [User Guide]!

## Usage

You can either download binaries from the [latest release] or install it
with pip:

`shell
pip install maturin
`

There are four main commands:

 * `maturin new` creates a new cargo project with maturin configured.
 * `maturin publish` builds the crate into python packages and publishes
them to pypi.
 * `maturin build` builds the wheels and stores them in a folder
(`target/wheels` by default), but doesn't upload them. It's possible to
upload those with [twine] or `maturin upload`.
 * `maturin develop` builds the crate and installs it as a python module
directly in the current virtualenv. Note that while `maturin develop` is
faster, it doesn't support all the feature that running `pip install` after
`maturin build` supports.

`pyo3` and `rust-cpython` bindings are automatically detected, for cffi or
binaries you need to pass `-b cffi` or `-b bin`.
maturin doesn't need extra configuration files and doesn't clash with an
existing setuptools-rust or milksnake configuration.
You can even integrate it with testing tools such as [tox].
There are examples for the different bindings in the `test-crates` folder.

The name of the package will be the name of the cargo project, i.e. the
name field in the `[package]` section of `Cargo.toml`.
The name of the module, which you are using when importing, will be the
`name` value in the `[lib]` section (which defaults to the name of the
package). For binaries, it's simply the name of the binary generated by
cargo.

## Python packaging basics

Python packages come in two formats:
A built form called wheel and source distributions (sdist), both of which
are archives.
A wheel can be compatible with any python version, interpreter (cpython and
pypy, mainly), operating system and hardware architecture (for pure python
wheels),
can be limited to a specific platform and architecture (e.g. when using
ctypes or cffi) or to a specific python interpreter and version on a
specific architecture and operating system (e.g. with pyo3 and
rust-cpython).

When using `pip install` on a package, pip tries to find a matching wheel
and install that. If it doesn't find one, it downloads the source
distribution and builds a wheel for the current platform,
which requires the right compilers to be installed. Installing a wheel is
much faster than installing a source distribution as building wheels is
generally slow.

When you publish a package to be installable with `pip install`, you upload
it to [pypi], the official package repository.
For testing, you can use [test pypi] instead, which you can use with `pip
install --index-url https://test.pypi.org/simple/`.
Note that for publishing for linux, [you need to use the manylinux docker
container], while for publishing from your repository you can use the
[PyO3/maturin-action github action].

## pyo3 and rust-cpython

For pyo3 and rust-cpython, maturin can only build packages for installed
python versions. On linux and mac, all python versions in `PATH` are used.
If you don't set your own interpreters with `-i`, a heuristic is used to
search for python installations.
On windows all versions from the python launcher (which is installed by
default by the python.org installer) and all conda environments except base
are used. You can check which versions are picked up with the `list-python`
subcommand.

pyo3 will set the used python interpreter in the environment variable
`PYTHON_SYS_EXECUTABLE`, which can be used from custom build scripts.
Maturin can build and upload wheels for pypy with pyo3, even though only
