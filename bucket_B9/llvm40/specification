DEF[LLVM_VERSION]=	4.0.1
DEF[PORTREVISION]=	2
DEF[PORTVERSION]=	${LLVM_VERSION}
DEF[MAJOR]=		${PORTVERSION:R}
DEF[SUFFIX]=		${MAJOR:S/.//}
DEF[TOOLCHAIN_GCC]=	EXTRACT_INFO(CURRENT_GCC)
DEF[GCC_VERSION]=	EXTRACT_INFO(CURRENT_GCC_VERSION)
DEF[GCC_LIB]=		toolchain/${TOOLCHAIN_GCC}/lib
DEF[GXX_INCLUDE]=	toolchain/${TOOLCHAIN_GCC}/include/c++/${GCC_VERSION}
DEF[GCC_TARGET_LIB]=	${GCC_LIB}/gcc/{{CONFIGURE_TARGET}}/${GCC_VERSION}
# ----------------------------------------------------------------------------

NAMEBASE=		llvm${SUFFIX}
VERSION=		${PORTVERSION}
REVISION=		${PORTREVISION}
KEYWORDS=		devel lang
VARIANTS=		standard
SDESC[standard]=	LLVM ${MAJOR} and Clang
HOMEPAGE=		http://llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		http://llvm.org/releases/${LLVM_VERSION}/
DISTFILE[1]=		llvm-${PORTVERSION}.src.tar.xz:main
DISTFILE[2]=		cfe-${PORTVERSION}.src.tar.xz:main
DF_INDEX=		1 2

SPKGS[standard]=	complete clang llvm

OPTIONS_AVAILABLE=	GOLD
OPTIONS_STANDARD=	GOLD
OPT_ON[dragonfly]=	GOLD//x86_64

LICENSE=		CUSTOM1:llvm
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_NAME=		CUSTOM1:"LLVM Release License"
LICENSE_SCHEME=		solo

# gone! FPC_EQUIVALENT=		devel/llvm40

ONLY_FOR_OPSYS=		sunos

USES=			cmake ninja ncurses perl:build python:build
			shebangfix zlib c++:llvm,clang
GNOME_COMPONENTS=	libxml2
DISTNAME=		llvm-${PORTVERSION}.src
SHEBANG_FILES=		tools/clang/tools/scan-view/bin/scan-view
			tools/clang/tools/clang-format/git-clang-format
			tools/clang/tools/clang-format/clang-format-diff.py
CMAKE_INSTALL_PREFIX=	{{PREFIX}}/llvm${SUFFIX}
CMAKE_ARGS=		-DLLVM_BUILD_LLVM_DYLIB=ON
			-DCMAKE_BUILD_WITH_INSTALL_RPATH=1
			-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm${SUFFIX}/lib"
			-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"
			-DLLVM_PARALLEL_LINK_JOBS=1
			-DLLVM_PARALLEL_COMPILE_JOBS={{MAKE_JOBS_NUMBER}}
CMAKE_BUILD_TYPE=	Release
PLIST_SUB=		NAMEBASE="llvm${SUFFIX}"
			LLVM_RELEASE="${LLVM_VERSION}"
			LLVM_MAJOR="${MAJOR}"

[GOLD].DESCRIPTION=			Build the LLVM Gold plugin for LTO
[GOLD].CMAKE_ARGS_ON=			-DLLVM_BINUTILS_INCDIR={{LOCALBASE}}/toolchain/include

post-extract:
	${MV} ${WRKDIR}/cfe-${PORTVERSION}.src ${WRKSRC}/tools/clang

post-patch:
	${REINPLACE_CMD} -e 's,/usr/local/,${LOCALBASE}/,' \
		${WRKSRC}/CMakeLists.txt \
		${WRKSRC}/tools/clang/lib/Driver/Tools.cpp
	${REINPLACE_CMD} -e 's|@RAVEN_GCC@|${LOCALBASE}/${GCC_LIB}|' \
		-e 's|@RAVEN_GCC_TARGET@|${LOCALBASE}/${GCC_TARGET_LIB}|' \
		${WRKSRC}/tools/clang/lib/Driver/ToolChains.cpp \
		${WRKSRC}/tools/clang/lib/Driver/Tools.cpp
	${REINPLACE_CMD} \
		-e 's|@RAVEN_GXX_HEADERS_DIR@|${LOCALBASE}/${GXX_INCLUDE}|' \
		${WRKSRC}/tools/clang/lib/Driver/ToolChains.cpp \
		${WRKSRC}/tools/clang/lib/Frontend/InitHeaderSearch.cpp

post-install:
	${RM} -r ${STAGEDIR}${MANPREFIX}/man
	${RM} -r ${STAGEDIR}${PREFIX}/llvm${SUFFIX}/share/man
	${RM} -r ${STAGEDIR}${PREFIX}/llvm${SUFFIX}/include/llvm/MC/MCAnalysis
	${INSTALL_PROGRAM} ${WRKDIR}/.build/bin/clang-tblgen \
	    ${STAGEDIR}${PREFIX}/llvm${SUFFIX}/bin/
	${FIND} ${STAGEDIR}${PREFIX}/llvm${SUFFIX}/bin/ -type f ! \( -name git-clang-format -o -name "scan-*" \) \
		| ${XARGS} ${STRIP_CMD}
	${FIND} ${STAGEDIR}${PREFIX}/llvm${SUFFIX}/lib/ -type f -name "*.so*" \
		| ${XARGS} ${STRIP_CMD}
