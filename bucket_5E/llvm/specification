DEF[LLVM_VERSION]=	EXTRACT_INFO(LLVM_VERSION)
DEF[PORTREVISION]=	0
DEF[PORTVERSION]=	${LLVM_VERSION}
DEF[MAJORMIN]=		${PORTVERSION:R}
DEF[MAJOR]=		${PORTVERSION:R:R}
# ----------------------------------------------------------------------------

NAMEBASE=		llvm
VERSION=		${PORTVERSION}
REVISION=		${PORTREVISION}
KEYWORDS=		devel lang
VARIANTS=		standard
SDESC[standard]=	Low Level Virtual Machine (version ${MAJORMIN})
HOMEPAGE=		http://llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/
DISTFILE[1]=		llvm-${PORTVERSION}.src.tar.xz:main
DISTFILE[2]=		cmake-${PORTVERSION}.src.tar.xz:main
DF_INDEX=		1 2

SPKGS[standard]=	single

OPTIONS_AVAILABLE=	GOLD
OPTIONS_STANDARD=	GOLD
OPT_ON[freebsd]=	GOLD//x86_64
OPT_ON[dragonfly]=	GOLD//x86_64
OPT_ON[linux]=		GOLD//x86_64

LICENSE=		CUSTOM1:single
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/LICENSE.TXT
LICENSE_SCHEME=		solo

FPC_EQUIVALENT=		devel/llvm70

BUILD_DEPENDS=		ncurses:primary:standard

USES=			cmake ninja python:build execinfo:build bdb:static zlib:build
			shebangfix c++:single
GNOME_COMPONENTS=	libxml2
DISTNAME=		llvm-${PORTVERSION}.src
CFLAGS=			-DNDEBUG
CXXFLAGS=		-DNDEBUG
CMAKE_ARGS=		-DLLVM_BUILD_LLVM_DYLIB=ON
			-DLLVM_LINK_LLVM_DYLIB=ON
			-DCMAKE_INSTALL_RPATH:STRING="{{LOCALBASE}}/llvm/lib"
			-DCMAKE_BUILD_WITH_INSTALL_RPATH=ON
			-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"
			-DLLVM_PARALLEL_LINK_JOBS=1
			-DLLVM_PARALLEL_COMPILE_JOBS={{MAKE_JOBS_NUMBER}}
			-DLLVM_INCLUDE_TESTS:BOOL=OFF
			-DLLVM_INCLUDE_EXAMPLES:BOOL=OFF
			-DLLVM_BUILD_32_BITS:BOOL=OFF
			-DLLVM_INSTALL_UTILS:BOOL=ON
			-DLLVM_ENABLE_RTTI:BOOL=ON
			-DLLVM_ENABLE_EH:BOOL=ON
			-DLLVM_INCLUDE_BENCHMARKS:BOOL=OFF
CMAKE_BUILD_TYPE=	Release
PLIST_SUB=		LLVM_RELEASE="${LLVM_VERSION}"
			LLVM_MAJOR="${MAJOR}"
SHEBANG_FILES=		utils/llvm-lit/llvm-lit.in
			tools/opt-viewer/*.py

BLOCK_WATCHDOG=		yes

[GOLD].DESCRIPTION=			Build the LLVM Gold plugin for LTO
[GOLD].CMAKE_ARGS_ON=			-DLLVM_BINUTILS_INCDIR={{LOCALBASE}}/toolchain/include
					-DLLVM_USE_LINKER=gold

post-extract:
	${CP} ${WRKDIR}/cmake-*/Modules/* ${WRKSRC}/cmake/modules/
	# force static linking of execinfo
	${RM} ${LOCALBASE}/lib/libexecinfo.so
	${MV} ${LOCALBASE}/lib/libexecinfo_pic.a ${LOCALBASE}/lib/libexecinfo.a
	# disable detection of shared db5
	${RM} ${LOCALBASE}/lib/db5/libdb.so
	# disable detection of shared curses/tinfo
	${RM} ${LOCALBASE}/lib/libtinfo.so
	${RM} ${LOCALBASE}/lib/libncurses.so
	# disable detection of shared zlib
	${RM} ${LOCALBASE}/lib/libz.so
	${MV} ${LOCALBASE}/lib/libz_pic.a ${LOCALBASE}/lib/libz.a

post-patch:
	${REINPLACE_CMD} -e "s|/usr/local|${PREFIX}|g" \
		${WRKSRC}/CMakeLists.txt

post-install:
	# Fix exports after execinfo/zlib statically linked
	${SED} -i'' -e 's|;execinfo||; s|;ZLIB::ZLIB||' \
		${STAGEDIR}${PREFIX}/lib/cmake/llvm/LLVMExports.cmake

	${RM} -r ${STAGEDIR}${PREFIX}/include/llvm/MC/MCAnalysis
	${RM} -r ${STAGEDIR}${PREFIX}/include/llvm/BinaryFormat/WasmRelocs

	# don't use llvm-strip yet, it doesn't work on SunOS or MacOS
.for F in bugpoint dsymutil llc lli llvm-ar llvm-as llvm-bcanalyzer \
	llvm-c-test llvm-cat llvm-cfi-verify llvm-config llvm-cov \
	llvm-cvtres llvm-cxxdump llvm-cxxfilt llvm-cxxmap llvm-diff llvm-dis \
	llvm-dwarfdump llvm-dwp llvm-exegesis llvm-extract llvm-ifs \
	llvm-link llvm-lto llvm-lto2 llvm-mc llvm-mca llvm-modextract llvm-mt \
	llvm-nm llvm-objcopy llvm-objdump llvm-opt-report llvm-pdbutil \
	llvm-profdata llvm-rc llvm-readobj llvm-rtdyld llvm-size \
	llvm-split llvm-stress llvm-strings llvm-symbolizer llvm-tblgen \
	llvm-undname llvm-xray llvm-jitlink llvm-lipo llvm-reduce \
	llvm-otool llvm-sim llvm-tapi-diff llvm-windres llvm-debuginfod-find \
	llvm-gsymutil llvm-jitlink-executor llvm-libtool-darwin llvm-ml \
	llvm-profgen llvm-tli-checker llvm-debuginfod llvm-dwarfutil \
	llvm-PerfectShuffle llvm-remark-size-diff \
	obj2yaml opt sancov sanstats split-file verify-uselistorder yaml2obj \
	FileCheck count not yaml-bench lli-child-target \
	UnicodeNameMappingGenerator
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/bin/${F}
.endfor
.for F in libLLVM-${MAJOR}.so libLTO.so.${MAJOR} libRemarks.so.${MAJOR}
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/${F}
.endfor

post-install-GOLD-ON:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/LLVMgold.so
