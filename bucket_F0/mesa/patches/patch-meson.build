--- meson.build.orig	2024-07-03 14:51:12 UTC
+++ meson.build
@@ -135,7 +135,7 @@ with_any_opengl = with_opengl or with_gl
 # Only build shared_glapi if at least one OpenGL API is enabled
 with_shared_glapi = with_shared_glapi and with_any_opengl
 
-system_has_kms_drm = ['openbsd', 'netbsd', 'freebsd', 'gnu/kfreebsd', 'dragonfly', 'linux', 'sunos', 'android', 'managarm'].contains(host_machine.system())
+system_has_kms_drm = ['openbsd', 'netbsd', 'freebsd', 'gnu/kfreebsd', 'dragonfly', 'linux', 'sunos', 'android', 'managarm', 'midnightbsd'].contains(host_machine.system())
 
 gallium_drivers = get_option('gallium-drivers')
 if gallium_drivers.contains('auto')
@@ -1138,7 +1138,7 @@ else
   endif
 
   # FreeBSD annotated <pthread.h> but Mesa isn't ready
-  if not (cc.get_id() == 'clang' and host_machine.system() == 'freebsd')
+  if not (cc.get_id() == 'clang' and ['freebsd', 'midnightbsd'].contains(host_machine.system()))
     _trial_c += ['-Werror=thread-safety']
   endif
 
@@ -1410,34 +1410,34 @@ foreach f, prefix: functions_to_detect
 endforeach
 
 if cpp.links('''
-    #define _GNU_SOURCE
     #include <stdlib.h>
 
-    static int dcomp(const void *l, const void *r, void *t) { return 0; }
+    static int dcomp(void *t, const void *l, const void *r) { return 0; }
 
     int main(int ac, char **av) {
       int arr[] = { 1 };
       void *t = NULL;
-      qsort_r((void*)&arr[0], 1, 1, dcomp, t);
+      qsort_r((void*)&arr[0], 1, 1, t, dcomp);
       return (0);
     }''',
     args : pre_args,
-    name : 'GNU qsort_r')
-  pre_args += '-DHAVE_GNU_QSORT_R'
+    name : 'BSD qsort_r')
+  pre_args += '-DHAVE_BSD_QSORT_R'
 elif cpp.links('''
+    #define _GNU_SOURCE
     #include <stdlib.h>
 
-    static int dcomp(void *t, const void *l, const void *r) { return 0; }
+    static int dcomp(const void *l, const void *r, void *t) { return 0; }
 
     int main(int ac, char **av) {
       int arr[] = { 1 };
       void *t = NULL;
-      qsort_r((void*)&arr[0], 1, 1, t, dcomp);
+      qsort_r((void*)&arr[0], 1, 1, dcomp, t);
       return (0);
     }''',
     args : pre_args,
-    name : 'BSD qsort_r')
-  pre_args += '-DHAVE_BSD_QSORT_R'
+    name : 'GNU qsort_r')
+  pre_args += '-DHAVE_GNU_QSORT_R'
 endif
 
 if cc.has_header_symbol('time.h', 'struct timespec')
