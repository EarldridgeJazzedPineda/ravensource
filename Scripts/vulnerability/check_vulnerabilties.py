"""
This script queries the "cpe_versions" table and retrieves all
port-version combinations that have been updated in the last 350 days.

Each combination is queried for the current vulnerabilities.
The "vulnerability_map" and "cve" tables will be updated in the same
transaction if necessary.

It's recommended that this script be run once a day.


Copyright (c) 2025, The Ravenports Project.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
"""

import os
import json
import time
import urllib.request
import mysql.connector
import yaml

DPATH = os.path.dirname(__file__)


def get_connection_details():
    """
    Read <parent-dir>/.credentials
    ------------------------------
    schema: <string value>
    credentials:
        user: <string value>
        password: <string value>
    server:
        host: <string value>
        port: <integer value>
    """
    path = os.path.join(DPATH, ".credential")
    try:
        with open(path, "r", encoding="utf-8") as config_file:
            config = yaml.load(config_file, Loader=yaml.FullLoader)
    except OSError as err:
        print(f"The {path} configuration file could not be opened for reading.")
        print(err)
        return None
    except yaml.YAMLError as err:
        print("The contents of {path} could not be understood.  Syntax error?")
        print(err)
        return None
    for toplevel in ["schema", "credentials", "server"]:
        if not toplevel in config:
            print(f"FATAL: missing {toplevel} of configuration")
            return None
    for item in ["user", "password"]:
        if not item in config["credentials"]:
            print(f"FATAL: missing {item} of credentials of configuration")
            return None
    for item in ["host", "port"]:
        if not item in config["server"]:
            print(f"FATAL: missing {item} of server of configuration")
            return None
    return config


def get_cpe_strings(conn):
    """
    return alphabetized array of CPE strings with optional last-updated time.
    Any string that hasn't been updated in the last 350 days is omitted.
    """
    sql = (
        "SELECT cpe_id, cpe_string "
        + "FROM cpe_versions "
        + "WHERE last_seen > DATE_SUB(NOW(), INTERVAL 350 DAY) "
        + "ORDER BY cpe_string"
    )
    cursor = conn.cursor()
    cursor.execute(sql)
    result = cursor.fetchall()
    return result


def query_nist_gov(cpe_string):
    """
    Convert current vulnerabilities to object
    """
    url = "https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName=cpe:2.3:a:" + cpe_string
    headers = {
        "User-Agent": "Ravenports Vulnerability Agent",
        "Accept": "application/json",
    }
    req = urllib.request.Request(url, headers=headers)
    try:
        with urllib.request.urlopen(req) as response:
            if response.status == 200:
                json_string = response.read().decode("utf-8")
                try:
                    return json.loads(json_string)
                except json.JSONDecodeError:
                    print("Failed to parse " + cpe_string)
                    return None

            # print(f"Unrecognized response status {response.status}")

    except urllib.error.HTTPError as e:
        print("HTTP Error:", e.code, e.msg)
        print(url)
    except urllib.error.URLError:
        # print("URL Error:", e.reason)
        pass
    return None


def decode_cve(vrecord):
    """
    returns a dictionary representation of cve
    """
    cve = {
        "id": vrecord["id"],
        "published": vrecord["published"],
        "modified": vrecord["lastModified"],
        "desc": "",
        "cvss_version": 0,
        "cvss_score": 0,
        "cvss_impact": 0,
        "cvss_exploit": 0,
        "cvss_vector": "",
    }
    if "descriptions" in vrecord:
        for drec in vrecord["descriptions"]:
            if drec["lang"] == "en":
                cve["desc"] = drec["value"]
    if "metrics" in vrecord:
        for mver in ["cvssMetricV40", "cvssMetricV31", "cvssMetricV30", "cvssMetricV2"]:
            if mver in vrecord["metrics"]:
                mrec = vrecord["metrics"][mver][0]
                cve["cvss_version"] = int("".join(mrec["cvssData"]["version"].split(".")))
                cve["cvss_exploit"] = int(mrec["exploitabilityScore"] * 10)
                cve["cvss_impact"] = int(mrec["impactScore"] * 10)
                cve["cvss_score"] = int(mrec["cvssData"]["baseScore"] * 10)
                cve["cvss_vector"] = mrec["cvssData"]["vectorString"]
                break
    return cve


def split_into_cve(data):
    """
    The vulnerability data has at least one CVE record in it.
    This function returns an array of parsed CVE records.
    There may be more than one CSVV record.  The highest version
    of csvv found is the highest priority
    """
    cset = []
    if not "vulnerabilities" in data:
        return cset
    for vdict in data["vulnerabilities"]:
        if "cve" in vdict:
            cset.append(decode_cve(vdict["cve"]))
    return cset


def update_record(conn, cpe_id, data):
    """
    Update MySQL database with CVE entries.
    Invalid data is None
    """
    if data is None:
        return

    if data["totalResults"] == 0:
        return

    cset = split_into_cve(data)

    if len(cset) == 0:
        return
    sql1 = "DELETE FROM vulnerability_map WHERE cpe_id = %s"
    sql2 = (
        "INSERT INTO cve (cve_id, published, modified, description, "
        + "csvv_version, csvv_basescore, csvv_exploit, csvv_impact, csvv_vector) "
        + "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s) "
        + "ON DUPLICATE KEY UPDATE "
        + "modified = %s, "
        + "description = %s, "
        + "csvv_version = %s, "
        + "csvv_basescore = %s, "
        + "csvv_exploit = %s, "
        + "csvv_impact = %s, "
        + "csvv_vector = %s "
        + "RETURNING cve_index"
    )
    sql3 = "INSERT INTO vulnerability_map (cpe_id, cve_index) VALUES (%s, %s)"
    # sql4 = "SELECT m.cve_id, c.modified

    # mysql.connector has autocommit = False by default
    # conn.start_transaction()
    cursor = conn.cursor()
    try:
        sql3_params = []
        cursor.execute(sql1, [cpe_id])
        for c in cset:
            params = [
                c["id"],
                c["published"],
                c["modified"],
                c["desc"],
                c["cvss_version"],
                c["cvss_score"],
                c["cvss_exploit"],
                c["cvss_impact"],
                c["cvss_vector"],
                c["modified"],
                c["desc"],
                c["cvss_version"],
                c["cvss_score"],
                c["cvss_exploit"],
                c["cvss_impact"],
                c["cvss_vector"],
            ]
            cursor.execute(sql2, params)
            cve_index = cursor.fetchone()[0]
            sql3_params.append(cve_index)
        for cve_index in sql3_params:
            cursor.execute(sql3, [cpe_id, cve_index])
        conn.commit()
    except Exception as err:
        print("Rolled back", err)
        conn.rollback()


def main():
    """
    Script entry point
    """
    config = get_connection_details()
    if not config:
        return

    try:
        conn = mysql.connector.connect(
            user=config["credentials"]["user"],
            password=config["credentials"]["password"],
            host=config["server"]["host"],
            port=config["server"]["port"],
            database=config["schema"],
        )
        cpe_strings = get_cpe_strings(conn)
        for cpe_id, cpe_string in cpe_strings:
            vuln = query_nist_gov(cpe_string)
            update_record(conn, cpe_id, vuln)
            time.sleep(6)
        conn.close()
    except mysql.connector.Error as err:
        print("Failed to connect to MySQL server")
        print(err)
    except KeyError as err:
        print("Fatal key error")
        print(err)


if __name__ == "__main__":
    main()
