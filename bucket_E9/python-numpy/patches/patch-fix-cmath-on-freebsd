From 8f161c4d633217f9123b5004d7f19a2d9bf8def5 Mon Sep 17 00:00:00 2001
From: Ralf Gommers <ralf.gommers@gmail.com>
Date: Sat, 7 Oct 2023 13:35:50 +0200
Subject: [PATCH] BLD: fix incorrect feature checks for mandatory math
 functions

Should fix the build on FreeBSD and other OSes that are not
C99-compliant.

Closes gh-24873
---
 numpy/core/meson.build | 36 ++++++++++++++++++++++++------------
 1 file changed, 24 insertions(+), 12 deletions(-)

--- numpy/core/meson.build.orig
+++ numpy/core/meson.build
@@ -148,20 +148,32 @@ endforeach
 # Mandatory functions: if not found, fail the build
 # Some of these can still be blocklisted if the C99 implementation
 # is buggy, see numpy/core/src/common/npy_config.h
-mandatory_funcs = [
+mandatory_math_funcs = [
   'sin', 'cos', 'tan', 'sinh', 'cosh', 'tanh', 'fabs',
   'floor', 'ceil', 'sqrt', 'log10', 'log', 'exp', 'asin',
   'acos', 'atan', 'fmod', 'modf', 'frexp', 'ldexp',
   'expm1', 'log1p', 'acosh', 'asinh', 'atanh',
-  'rint', 'trunc', 'exp2',
-  'copysign', 'nextafter', 'strtoll', 'strtoull', 'cbrt',
+  'rint', 'trunc', 'exp2', 'copysign', 'nextafter', 'cbrt',
   'log2', 'pow', 'hypot', 'atan2',
-  'csin', 'csinh', 'ccos', 'ccosh', 'ctan', 'ctanh',
-  'creal', 'cimag', 'conj'
 ]
-foreach func: mandatory_funcs
-  if not cc.has_function(func)
-    error('Function `{func}` not found')
+foreach func: mandatory_math_funcs
+  if not cc.has_function(func, prefix: '#include <math.h>', dependencies: m_dep)
+    error(f'Function `@func@` not found')
+  endif
+endforeach
+
+mandatory_complex_math_funcs = [
+  'csin', 'csinh', 'ccos', 'ccosh', 'ctan', 'ctanh', 'creal', 'cimag', 'conj'
+]
+foreach func: mandatory_complex_math_funcs
+  if not cc.has_function(func, prefix: '#include <complex.h>', dependencies: m_dep)
+    error(f'Function `@func@` not found')
+  endif
+endforeach
+
+foreach func: ['strtoll', 'strtoull']
+  if not cc.has_function(func, prefix: '#include <stdlib.h>')
+    error(f'Function `@func@` not found')
   endif
 endforeach
 
@@ -175,13 +187,13 @@ c99_complex_funcs = [
 foreach func: c99_complex_funcs
   func_single = func + 'f'
   func_longdouble = func + 'l'
-  if cc.has_function(func)
+  if cc.has_function(func, prefix: '#include <complex.h>', dependencies: m_dep)
     cdata.set10('HAVE_' + func.to_upper(), true)
   endif
-  if cc.has_function(func_single)
+  if cc.has_function(func_single, prefix: '#include <complex.h>', dependencies: m_dep)
     cdata.set10('HAVE_' + func_single.to_upper(), true)
   endif
-  if cc.has_function(func_longdouble)
+  if cc.has_function(func_longdouble, prefix: '#include <complex.h>', dependencies: m_dep)
     cdata.set10('HAVE_' + func_longdouble.to_upper(), true)
   endif
 endforeach
@@ -190,7 +202,7 @@ endforeach
 # libnpymath as a C99 compat layer, these may still be relevant.
 c99_macros = ['isfinite', 'isinf', 'isnan', 'signbit']
 foreach macro: c99_macros
-  if cc.has_function(macro)
+  if cc.has_function(macro, prefix: '#include <math.h>', dependencies: m_dep)
     cdata.set10('NPY_HAVE_DECL_' + macro.to_upper(), true)
     if not cc.has_header_symbol('Python.h', macro, dependencies: py_dep)
       # Add in config.h as well, except if it will clash with Python's config.h content
