# ICE on GCC 11.2.0, see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103703
DEF[LLVM_VERSION]=	EXTRACT_INFO(LLVM_VERSION)
# ----------------------------------------------------------------------------

NAMEBASE=		libcxx
VERSION=		${LLVM_VERSION}
KEYWORDS=		lang
VARIANTS=		standard
SDESC[standard]=	LLVM C++ standard library
HOMEPAGE=		https://libcxx.llvm.org/
CONTACT=		nobody

DOWNLOAD_GROUPS=	main
SITES[main]=		https://github.com/llvm/llvm-project/releases/download/llvmorg-${LLVM_VERSION}/
DISTFILE[1]=		libcxx-${LLVM_VERSION}.src.tar.xz:main
DISTFILE[2]=		libcxxabi-${LLVM_VERSION}.src.tar.xz:main
DISTFILE[3]=		cmake-${LLVM_VERSION}.src.tar.xz:main
DF_INDEX=		1 2 3

SPKGS[standard]=	complete primary abi experimental

OPTIONS_AVAILABLE=	none
OPTIONS_STANDARD=	none

BROKEN[all]=		GCC ICE: /construction/libcxx/llvm/projects/libcxxabi/src/cxa_demangle.cpp:410:1: internal compiler error: Segmentation fault

LICENSE=		CUSTOM1:primary CUSTOM2:abi
LICENSE_NAME=		CUSTOM1:"University of Illinois/NCSA Open Source License"
			CUSTOM2:"University of Illinois/NCSA Open Source License"
LICENSE_FILE=		CUSTOM1:{{WRKSRC}}/projects/libcxx/LICENSE.TXT
			CUSTOM2:{{WRKSRC}}/projects/libcxxabi/LICENSE.TXT
LICENSE_SCHEME=		multi

BUILD_DEPENDS=		python-Sphinx:single:python_default
			llvm:single:standard
BUILDRUN_DEPENDS=	llvm-libunwind:single:standard

USES=			cpe cmake cclibs:primary python:build
CPE_VENDOR=		llvm
CPE_PRODUCT=		llvm
CMAKE_BUILD_TYPE=	Release
CMAKE_ARGS=		-DLLVM_HOST_TRIPLE:STRING="{{CONFIGURE_TARGET}}"
			-DLLVM_ENABLE_SPHINX=ON
			-DLIBCXX_CXX_ABI_LIBRARY_PATH={{WRKDIR}}/.build/lib
			-DLIBCXX_INCLUDE_BENCHMARKS:BOOL=OFF
			-DPython3_EXECUTABLE={{PYTHON_CMD}}
# #			-DLIBCXXABI_ENABLE_STATIC_UNWINDER:BOOL=OFF
# #			-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY:BOOL=ON
CXXFLAGS=		-Wno-attributes
			-Wno-deprecated-declarations
			-Wno-empty-body
			-Wno-shadow
DISTNAME=		llvm

post-extract:
	${MKDIR} ${WRKSRC}/projects
	${MV} ${WRKDIR}/libcxx-${LLVM_VERSION}.src \
		${WRKSRC}/projects/libcxx
	${MV} ${WRKDIR}/libcxxabi-${LLVM_VERSION}.src \
		${WRKSRC}/projects/libcxxabi
	${SED} -e 's|%%VERSION%%|${LLVM_VERSION}|' ${FILESDIR}/CMakeLists.txt \
		> ${WRKSRC}/CMakeLists.txt
	# install more cmake functions
	${CP} ${WRKDIR}/cmake-${LLVM_VERSION}.src/Modules/* \
		${WRKSRC}/projects/libcxx/cmake/Modules/
	${CP} ${WRKDIR}/cmake-${LLVM_VERSION}.src/Modules/* \
		${WRKSRC}/projects/libcxxabi/cmake/Modules/

pre-configure:
	# ${REINPLACE_CMD} -e '/add_dependencies(cxx_static unwind)/d' \
		${WRKSRC}/projects/libcxx/src/CMakeLists.txt

post-install:
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libc++.so
	${STRIP_CMD} ${STAGEDIR}${PREFIX}/lib/libc++abi.so
