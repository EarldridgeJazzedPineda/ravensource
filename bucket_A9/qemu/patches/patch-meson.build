--- meson.build.orig	2023-04-05 20:10:24 UTC
+++ meson.build
@@ -46,8 +46,8 @@ config_host_data = configuration_data()
 genh = []
 qapi_trace_events = []
 
-bsd_oses = ['gnu/kfreebsd', 'freebsd', 'netbsd', 'openbsd', 'dragonfly', 'darwin']
-supported_oses = ['windows', 'freebsd', 'netbsd', 'openbsd', 'darwin', 'sunos', 'linux']
+bsd_oses = ['midnightbsd', 'freebsd', 'netbsd', 'openbsd', 'dragonfly', 'darwin']
+supported_oses = ['windows', 'freebsd', 'netbsd', 'openbsd', 'darwin', 'sunos', 'linux', 'dragonfly', 'midnightbsd']
 supported_cpus = ['ppc', 'ppc64', 's390x', 'riscv', 'x86', 'x86_64',
   'arm', 'aarch64', 'loongarch64', 'mips', 'mips64', 'sparc64']
 
@@ -444,7 +444,7 @@ if get_option('hax').allowed()
     accelerators += 'CONFIG_HAX'
   endif
 endif
-if targetos == 'netbsd'
+if targetos in [ 'netbsd', 'dragonfly' ]
   nvmm = cc.find_library('nvmm', required: get_option('nvmm'))
   if nvmm.found()
     accelerators += 'CONFIG_NVMM'
@@ -887,7 +887,7 @@ if have_system and get_option('curses').
       return 0;
     }'''
 
-  curses_dep_list = targetos == 'windows' ? ['ncurses', 'ncursesw'] : ['ncursesw']
+  curses_dep_list = targetos == 'windows' ? ['ncurses', 'ncursesw'] : ['ncurses']
   curses = dependency(curses_dep_list,
                       required: false,
                       method: 'pkg-config',
@@ -910,15 +910,16 @@ if have_system and get_option('curses').
       has_curses_h = cc.has_header('curses.h', args: curses_compile_args)
     endif
     if has_curses_h
-      curses_libname_list = (targetos == 'windows' ? ['pdcurses'] : ['ncursesw', 'cursesw'])
+      libtinfo = cc.find_library('tinfo', required: false, static: enable_static)
+      curses_libname_list = (targetos == 'windows' ? ['pdcurses'] : ['ncurses'])
       foreach curses_libname : curses_libname_list
         libcurses = cc.find_library(curses_libname,
                                     required: false,
                                     kwargs: static_kwargs)
         if libcurses.found()
-          if cc.links(curses_test, args: curses_compile_args, dependencies: libcurses)
+          if cc.links(curses_test, args: curses_compile_args, dependencies: [libncurses,libtinfo])
             curses = declare_dependency(compile_args: curses_compile_args,
-                                        dependencies: [libcurses])
+                                        dependencies: [libncurses, libtinfo])
             break
           else
             msg = 'curses library not usable'
