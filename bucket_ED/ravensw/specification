DEF[PORTVERSION]=	1.11.1
# branch: c-version
DEF[REVISION]=		9
DEF[ROLLING_TAG]=	${PORTVERSION}_rev${REVISION}
DEF[SQLITE_VER]=	3.28.0
DEF[SQLITE_LONGVER]=	${SQLITE_VER:S/.//:S/./0/}00
DEF[SQLITE_YEAR]=	2019
# ----------------------------------------------------------------------------

NAMEBASE=		ravensw
VERSION=		${PORTVERSION}
REVISION=		${REVISION}
KEYWORDS=		raven
VARIANTS=		standard
SDESC[standard]=	Ravenports binary package manager
HOMEPAGE=		https://github.com/jrmarino/ravensw/blob/master/README.md
CONTACT=		nobody

DOWNLOAD_GROUPS=	main sqlite
SITES[main]=		GITHUB/jrmarino:ravensw:${ROLLING_TAG}
SITES[sqlite]=		https://www.sqlite.org/${SQLITE_YEAR}/
			http://www2.sqlite.org/${SQLITE_YEAR}/
DISTFILE[1]=		generated:main
DISTFILE[2]=		sqlite-autoconf-${SQLITE_LONGVER}.tar.gz:sqlite
DF_INDEX=		1 2

SPKGS[standard]=	single

OPTIONS_AVAILABLE=	RUNTESTS
OPTIONS_STANDARD=	RUNTESTS

LICENSE=		BSD2CLAUSE:single
LICENSE_FILE=		BSD2CLAUSE:{{WRKSRC}}/COPYING
LICENSE_SCHEME=		solo

BUILD_DEPENDS=		libarchive:single:ravensw
			libucl:single:ravensw
			fetch:single:library
			linenoise:single:standard
			libb2:single:standard
			elftoolchain:libraries:standard
			uthash:primary:standard
			picosat:single:standard
			autoconf:single:standard
			automake:single:standard
B_DEPS[sunos]=		musl-fts:single:standard

USES=			pkgconfig ssl:build zstd:build expat:build
MUST_CONFIGURE=		yes
CONFIGURE_ARGS=		--mandir={{MANPREFIX}}/man
			--pkgconfigdir={{PREFIX}}/lib/pkgconfig
			--prefix={{PREFIX}}
CFLAGS=			-Wno-error

VAR_OPSYS[sunos]=	CFLAGS=-DUSE_ESTREAM

# comment next 2 lines out later
SET_DEBUGGING_ON=	yes
OPTIMIZER_LEVEL=	0

[RUNTESTS].DESCRIPTION=			Run kyua tests after build
[RUNTESTS].BUILD_DEPENDS_ON=		kyua:single:standard
					Zstandard:complete:standard

post-extract:
	# Install SQLite source
	(cd ${WRKDIR}/sqlite-autoconf-${SQLITE_LONGVER}/ && \
		cp sqlite3.[ch] shell.c ${WRKSRC}/external/sqlite/)
	${REINPLACE_CMD} -e 's|SQLITE_CDECL main|SQLITE_CDECL sqlite3_shell|'\
		${WRKSRC}/external/sqlite/shell.c

post-build-RUNTESTS-ON:
	# All the tests are hardcoded with "pkg" executable
	(cd ${WRKSRC}/src && ${LN} -s ravensw pkg)
	${ECHO} "#!/bin/sh"                  >> ${WRKSRC}/tests/exec_test.sh
.if "${OPSYS}" == "Linux"
	${ECHO} "export -n RAVENSW_CACHEDIR" >> ${WRKSRC}/tests/exec_test.sh
	${ECHO} "export -n RAVENSW_DBDIR"    >> ${WRKSRC}/tests/exec_test.sh
.else
	${ECHO} "unset RAVENSW_CACHEDIR"     >> ${WRKSRC}/tests/exec_test.sh
	${ECHO} "unset RAVENSW_DBDIR"        >> ${WRKSRC}/tests/exec_test.sh
.endif
	${ECHO} "kyua test"                  >> ${WRKSRC}/tests/exec_test.sh
	${CHMOD} ${BINMODE} ${WRKSRC}/tests/exec_test.sh
	(cd ${WRKSRC}/tests && ./exec_test.sh ||:)
